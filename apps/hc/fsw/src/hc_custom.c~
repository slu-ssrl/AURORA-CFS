/*
** $Id: $
**
** Title: Heater Control (HC) Application Custom Commands
**
** Purpose: Provides functions for each heater control type
**
** Author: Lindsay A. Walton, Summer 2015 Intern for Code 582 NASA GSFC
**
** Notes:
**
** $Log: $
*/

#include "cfe.h"
#include "hc_app.h"
#include "hc_custom.h"
#include "hc_events.h"
#include "hc_msg.h"
#include "hc_platform_cfg.h"
#include "sim_msgids.h"
#include "sim_msgdefs.h"

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* HC -- access to global data structure (defined in hc_app.c)     */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

extern HC_GlobalData_t  HC_GlobalData;


/*************************************************************************
**
** Main custom function
**
*************************************************************************/
boolean  HC_CustomFunction(uint8 Index)
{
    boolean Result;

    /* Switch on the function index */
    switch (Index)
    {
        case HC_BATTERY_FUNC:
            Result = HC_Battery();
            break;
        case HC_PROPULSION_FUNC:
            Result = HC_Propulsion();
            break;
        default:
            CFE_EVS_SendEvent(HC_CFCALL_ERR_EID, CFE_EVS_ERROR,
                              "Invalid HC_CustomFunction call: index = %d",
                              Index);
            Result = FALSE;
            break;

    }
    return(Result);
}
/* End HC_CustomFunction */

/*************************************************************************
** Mission specific functions
*************************************************************************/

/* Battery function */
boolean HC_Battery(void)
{
    boolean Result = TRUE;
    uint8 AverageTemp = 0;
    uint8 ThermsPerHeater;
    uint8 Heater;
    uint8 i; /* Used to cycle through the heaters */
    uint8 j; /* Used to cycle through the thermistors */

    /* Access to table data */
    HC_TypeTable_t *TypeTablePtr = HC_GlobalData.TypeTablePtr;
    HC_ComponentTable_t *ComTablePtr = HC_GlobalData.ComponentTablePtr;

    /* Calculate the number of thermistors per heater */
    ThermsPerHeater = ComTablePtr->Components[0].NumThermistors / 
                      ComTablePtr->Components[0].NumHeaters;

    /* Determine heater control */
    for (i = 0; i < ComTablePtr->Components[0].NumHeaters; i++)
    {
        for (j = 0; j < ComTablePtr->Components[0].NumThermistors; j++)
        {
            /* Find the corresponding heater for that thermistor */
            Heater = ComTablePtr->Components[0].Therms[j] / ThermsPerHeater;

            /* If the thermistor corresponds to the current heater */
            if (Heater == ComTablePtr->Components[0].Heaters[i])
            {
                /* Add it to the current sum to calculate the average */
                AverageTemp = AverageTemp + HC_GlobalData.ThermalDataPkt.Temps[j];
            }
        }

        /* Divide by the number of temperatures to get the average */
        AverageTemp = AverageTemp / ThermsPerHeater;

        printf("Heater: %d Average temperature: %d\n", 
               ComTablePtr->Components[0].Heaters[i], AverageTemp);    
 
        /* If average temperature is lower than the low set point */
        if (AverageTemp < TypeTablePtr->Types[HC_BATTERY_TYPE].TempLow)
        {
            printf("Sending command to turn heater %d on.\n", 
                   ComTablePtr->Components[0].Heaters[i]); 

            /* Send command to turn the heater on */
            Result = HC_SendCtrlCmd(ComTablePtr->Components[0].Heaters[i], TRUE);
        } 
    
        /* If average temperature is higher than the high set point */
        else if (AverageTemp > TypeTablePtr->Types[HC_BATTERY_TYPE].TempHigh)
        {
            printf("Sending command to turn heater %d off.\n", 
                   ComTablePtr->Components[0].Heaters[i]); 

            /* Send command to turn the heater off */
            Result = HC_SendCtrlCmd(ComTablePtr->Components[0].Heaters[i], FALSE);
        }
        else 
        {
            printf("No heater control necessary.\n");
        } 

        /* Reset average  temperature */
        AverageTemp = 0; 
    }
 
    return(Result);
} /* End HC_Battery */


/* Propulsion function */
boolean HC_Propulsion(void)
{
    /* Not complete */
    printf("Performing propulsion heater control.\n");

    return(TRUE);
} /* End HC_Propulsion */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Send Heater Control Command                                     */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

boolean HC_SendCtrlCmd(uint8 Heater, boolean TurnOn)
{
    boolean CommandResult;
    HC_SendCtrlCmd_t HC_SendCtrlCmd;
    
    /* Initialize heater control command message */
    CFE_SB_InitMsg(&HC_SendCtrlCmd, SIM_CMD_MID,
                   sizeof(HC_SendCtrlCmd_t), TRUE);

    /* Initialize data in the message */
    HC_SendCtrlCmd.HeaterIndex = Heater;
    HC_SendCtrlCmd.TurnOnFlag = TurnOn;

    /* Set the message ID */
    CFE_SB_SetMsgId((CFE_SB_Msg_t *) &HC_SendCtrlCmd, SIM_CMD_MID);

    /* Set the command code */
    CFE_SB_SetCmdCode((CFE_SB_Msg_t *) &HC_SendCtrlCmd, SIM_CTRL_HEATER_CC);

    /* Send heater control command packet */
    CommandResult = CFE_SB_SendMsg((CFE_SB_Msg_t *) &HC_SendCtrlCmd);

    return(CommandResult);

} /* End of HC_SendCtrlCmd() */

/************************/
/*  End of File Comment */
/************************/
